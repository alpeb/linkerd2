name: Release
on:
  push:
    tags:
    - "*"
permissions:
  contents: read
env:
  GH_ANNOTATION: true
jobs:
  docker_build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # Keep in sync with integration_tests.yaml matrix build
        target: [proxy, controller, metrics-api, web, cni-plugin, debug, cli-bin, grafana, jaeger-webhook, tap]
    name: Docker build (${{ matrix.target }})
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
    - name: Set environment variables from scripts
      run: |
        . bin/_tag.sh
        echo "TAG=$(CI_FORCE_CLEAN=1 bin/root-tag)" >> $GITHUB_ENV

        . bin/_docker.sh
        echo "DOCKER_REGISTRY=ghcr.io/alpeb" >> $GITHUB_ENV
        echo "DOCKER_BUILDKIT_CACHE=${{ runner.temp }}/.buildx-cache" >> $GITHUB_ENV
    - name: Cache docker layers
      uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
      with:
        path: ${{ env.DOCKER_BUILDKIT_CACHE }}
        key: ${{ runner.os }}-buildx-${{ matrix.target }}-${{ env.TAG }}
        restore-keys: ${{ runner.os }}-buildx-${{ matrix.target }}-
    - name: Set up QEMU
      uses: docker/setup-qemu-action@27d0a4f181a40b142cce983c5393082c365d1480
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e673438944759779e411a0f7ceef3ba437dccfa0
    - name: Build & Push Multi Arch Images
      env:
        DOCKER_MULTIARCH: 1
        DOCKER_PUSH: 1
      run: |
        echo "${{ secrets.DOCKER_GHCR_PAT }}" | docker login ghcr.io -u "${{ secrets.DOCKER_GHCR_USERNAME }}" --password-stdin
        bin/docker-build-${{ matrix.target }}
    - name: Prune docker layers cache
      # changes generate new images while the existing ones don't get removed
      # so we manually do that to avoid bloating the cache
      run: bin/docker-cache-prune
    - name: Create artifact with CLI
      # windows_static_cli_tests below needs this because it can't create linux containers
      # inside windows
      if: matrix.target == 'cli-bin'
      env:
        ARCHIVES: /home/runner/archives
      run: |
        bin/docker-pull-binaries $TAG
        mkdir -p $ARCHIVES
        cp -r $PWD/target/release/linkerd2-cli-$TAG-windows.exe $ARCHIVES/linkerd-windows.exe
    # `with.path` values do not support environment variables yet, so an
    # absolute path is used here.
    #
    # https://github.com/actions/upload-artifact/issues/8
    - name: Upload artifact
      if: matrix.target == 'cli-bin'
      uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074
      with:
        name: image-archives
        path: /home/runner/archives
  integration_tests:
    strategy:
      matrix:
        integration_test:
        - cluster-domain
        - deep
        - external-issuer
        - external-prometheus-deep
        - external-resources
        - helm-deep
        - helm-upgrade
        - uninstall
        - upgrade-edge
        - upgrade-stable
        - cni-calico-deep
    needs: [docker_build]
    name: Integration tests (${{ matrix.integration_test }})
    timeout-minutes: 60
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout code
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
    - name: Try to load cached Go modules
      uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Set environment variables from scripts
      run: |
        TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
        CMD="$PWD/target/release/linkerd2-cli-$TAG-linux-amd64"
        echo "CMD=$CMD" >> $GITHUB_ENV
        echo "TAG=$TAG" >> $GITHUB_ENV
    - name: Run integration tests
      run: |
        bin/docker-pull-binaries $TAG
        # Validate the CLI version matches the current build tag.
        [[ "$TAG" == "$($CMD version --short --client)" ]]
        bin/tests --images preload --name ${{ matrix.integration_test }} "$CMD"
