#
# This file is a mostly a concatenation of `kind_integration.yml` and
# `cloud_integration.yml`, specifically for release. Once GitHub Actions

name: Release
on:
  push:
    tags:
    - "*"
env:
  GH_ANNOTATION: true
jobs:
  docker_build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        target: [proxy, controller, web, cni-plugin, debug, cli-bin, grafana]
    name: Docker build (${{ matrix.target }})
    steps:
    - name: Checkout code
      # actions/checkout@v2
      uses: actions/checkout@722adc6
    - name: Set environment variables from scripts
      run: |
        . bin/_tag.sh
        echo ::set-env name=TAG::$(CI_FORCE_CLEAN=1 bin/root-tag)

        . bin/_docker.sh
        echo ::set-env name=DOCKER_REGISTRY::$DOCKER_REGISTRY
        echo ::set-env name=DOCKER_BUILDKIT_CACHE::${{ runner.temp }}/.buildx-cache
    - name: Cache docker layers
      # actions/cache@v2.0.0
      uses: actions/cache@b820478
      with:
        path: ${{ env.DOCKER_BUILDKIT_CACHE }}
        key: ${{ runner.os }}-buildx-${{ matrix.target }}-${{ env.TAG }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.target }}-
    - name: Build docker images
      env:
        DOCKER_TRACE: 1
      run: |
        docker buildx create --driver docker-container --use
        bin/docker-build-${{ matrix.target }}
    - name: Configure gcloud
      # linkerd/linkerd2-action-gcloud@v1.0.1
      uses: linkerd/linkerd2-action-gcloud@308c4df
      with:
        cloud_sdk_service_account_key: ${{ secrets.CLOUD_SDK_SERVICE_ACCOUNT_KEY }}
        gcp_project: ${{ secrets.GCP_PROJECT }}
        gcp_zone: ${{ secrets.GCP_ZONE }}
    - name: Push docker images to registry
      run: |
        . bin/_docker.sh
        docker_push "${{ matrix.target }}" "$TAG"
        docker_retag "${{ matrix.target }}" "$TAG" main
        docker_push "${{ matrix.target }}" main
    - name: Prune docker layers cache
      # changes generate new images while the existing ones don't get removed
      # so we manually do that to avoid bloating the cache
      run: bin/docker-cache-prune
  windows_static_cli_tests:
    name: Static CLI tests (windows)
    runs-on: windows-latest
    needs: [docker_build]
    steps:
    - name: Checkout code
      # actions/checkout@v2
      uses: actions/checkout@722adc6
    - name: Try to load cached Go modules
      # actions/cache@v1.1.2
      uses: actions/cache@70655ec
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Download CLI
      run: |
        TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
        WIN_CMD="target/release/linkerd2-cli-$TAG-windows.exe"
        bin/docker-pull-binaries $TAG
        echo "::set-env name=WIN_CMD::$WIN_CMD"
    - name: Run CLI Integration tests
      run: |
        go test --failfast --mod=readonly ".\test\cli" --linkerd=$WIN_CMD --cli-tests -v
  choco_pack:
    # only runs for stable tags. The conditionals are at each step level instead of the job level
    # otherwise the jobs below that depend on this one won't run
    name: Pack Chocolatey release
    needs: [docker_build]
    runs-on: windows-2019
    steps:
    - name: Checkout code
      if: startsWith(github.ref, 'refs/tags/stable')
      # actions/checkout@v2
      uses: actions/checkout@722adc6
    - name: Chocolatey - update nuspec
      if: startsWith(github.ref, 'refs/tags/stable')
      run: |
        $LINKERD_VERSION=$env:GITHUB_REF.Substring(17)
        (Get-Content bin\win\linkerd.nuspec).replace('LINKERD_VERSION', $LINKERD_VERSION) | Set-Content bin\win\linkerd.nuspec
    - name: Chocolatey - pack
      if: startsWith(github.ref, 'refs/tags/stable')
      # crazy-max/ghaction-chocolatey@v1.2.2
      uses: crazy-max/ghaction-chocolatey@55c9188
      with:
        args: pack bin/win/linkerd.nuspec
    - name: Chocolatey - upload package
      if: startsWith(github.ref, 'refs/tags/stable')
      # actions/upload-artifact@v2.01
      uses: actions/upload-artifact@97b7dac
      with:
        name: choco
        path: ./linkerd.*.nupkg
  gh_release:
    name: Create GH release
    if: startsWith(github.ref, 'refs/tags/stable') || startsWith(github.ref, 'refs/tags/edge')
    runs-on: ubuntu-18.04
    needs: [choco_pack]
    steps:
    - name: Checkout code
      # actions/checkout@v2
      uses: actions/checkout@722adc6
    - name: Set environment variables from scripts
      run: |
        . bin/_tag.sh
        . bin/_release.sh
        echo ::set-env name=TAG::$(CI_FORCE_CLEAN=1 bin/root-tag)
        extract_release_notes NOTES.md
    - name: Download choco package
      if: startsWith(github.ref, 'refs/tags/stable')
      # actions/download-artifact@v1
      uses: actions/download-artifact@18f0f59
      with:
        name: choco
    - name: Pull CLI binaries
      run : |
        bin/docker-pull-binaries $TAG
        VERSION=${TAG#"stable-"}
        mv choco/linkerd.*.nupkg target/release/linkerd2-cli-stable-$VERSION.nupkg || true
    - name: Create release
      id: create_release
      # softprops/action-gh-release@v1
      uses: softprops/action-gh-release@91409e7
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: false
        prerelease: false
        body_path: NOTES.md
        files: |
          ./target/release/linkerd2-cli-*-darwin
          ./target/release/linkerd2-cli-*-darwin.sha256
          ./target/release/linkerd2-cli-*-linux
          ./target/release/linkerd2-cli-*-linux.sha256
          ./target/release/linkerd2-cli-*-windows.exe
          ./target/release/linkerd2-cli-*-windows.exe.sha256
          ./target/release/linkerd2-cli-*.nupkg
